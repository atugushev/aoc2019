from collections import deque
from typing import List

import pytest

from computer import Computer

lg_str = """\
3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,
1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,
999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99
"""
lg_mem = [int(x) for x in lg_str.split(",")]


@pytest.mark.parametrize(
    "memory, expected_memory, stdin, expected_stdout",
    (
        # position mode
        ([1, 0, 0, 0, 99], [2, 0, 0, 0, 99], [], []),
        ([2, 3, 0, 3, 99], [2, 3, 0, 6, 99], [], []),
        (
            [1, 9, 10, 3, 2, 3, 11, 0, 99, 30, 40, 50],
            [3500, 9, 10, 70, 2, 3, 11, 0, 99, 30, 40, 50],
            [],
            [],
        ),
        ([2, 4, 4, 5, 99, 0], [2, 4, 4, 5, 99, 9801], [], []),
        ([1, 1, 1, 4, 99, 5, 6, 0, 99], [30, 1, 1, 4, 2, 5, 6, 0, 99], [], []),
        ([3, 7, 1, 7, 7, 7, 99, 0], [3, 7, 1, 7, 7, 7, 99, 20], [10], []),
        ([3, 9, 1, 9, 9, 9, 4, 9, 99, 0], [3, 9, 1, 9, 9, 9, 4, 9, 99, 20], [10], [20]),
        ([3, 12, 6, 12, 15, 1, 13, 14, 13, 4, 13, 99, -1, 0, 1, 9], [], [0], [0]),
        ([3, 12, 6, 12, 15, 1, 13, 14, 13, 4, 13, 99, -1, 0, 1, 9], [], [1], [1]),
        ([3, 9, 8, 9, 10, 9, 4, 9, 99, -1, 8], [], [8], [1]),
        ([3, 9, 8, 9, 10, 9, 4, 9, 99, -1, 8], [], [88], [0]),
        ([3, 9, 7, 9, 10, 9, 4, 9, 99, -1, 8], [], [0], [1]),
        ([3, 9, 7, 9, 10, 9, 4, 9, 99, -1, 8], [], [88], [0]),
        # immediate mode
        ([3, 3, 1108, -1, 8, 3, 4, 3, 99], [], [8], [1]),
        ([3, 3, 1108, -1, 8, 3, 4, 3, 99], [], [88], [0]),
        ([3, 3, 1107, -1, 8, 3, 4, 3, 99], [], [0], [1]),
        ([3, 3, 1107, -1, 8, 3, 4, 3, 99], [], [88], [0]),
        ([3, 12, 6, 12, 15, 1, 13, 14, 13, 4, 13, 99, -1, 0, 1, 9], [], [0], [0]),
        ([3, 3, 1105, -1, 9, 1101, 0, 0, 12, 4, 12, 99, 1], [], [1], [1]),
        # large test
        (lg_mem, [], [7], [999]),
        (lg_mem, [], [8], [1000]),
        (lg_mem, [], [9], [1001]),
    ),
)
def test(
    memory: List[int],
    expected_memory: List[int],
    stdin: List[int],
    expected_stdout: List[int],
) -> None:
    comp = Computer()
    comp.init_memory(memory[:])
    if stdin:
        comp.stdin = deque(stdin)
    comp.run()
    if expected_memory:
        assert comp.memory[: len(expected_memory)] == expected_memory
    if expected_stdout:
        assert comp.stdout == deque(expected_stdout)
